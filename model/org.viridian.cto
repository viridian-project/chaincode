/*
 * Licensed under the GNU General Public License, Version 3 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.gnu.org/licenses/
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Write your model definitions here
 */

namespace org.viridian

/*********
 * USERS *
 *********/

/**
  User contact information that should be hidden to other users, only visible
  for the users themselves and for system admins to contact the user if needed.
  In `permissions.acl`, this asset can be given read-access only to admins and
  the users themselves.
**/
asset UserContact identified by id {
  o String id
  --> User user
  /*
  try to match all allowed email address characters according to https://stackoverflow.com/questions/2049502/what-characters-are-allowed-in-an-email-address,
  see esp. https://stackoverflow.com/a/2071250/4502495
  */
  o String email regex=/^[^\s]+@[^\s]+\.[a-zA-Z0-9-]{2,}$/ /* any non-whitespace,
  then @, then any non-whitespace, then ., then two or more a-zA-Z0-9-
  (chars allowed in domain according to
  https://stackoverflow.com/questions/2049502/what-characters-are-allowed-in-an-email-address) */
  o DateTime timestamp /* if contact data remain unverified for too long time, they are deleted */
  o Boolean verified default=false
}

/**
  UserContact data must be verified by sending the user a secret via a contact
  channel. If the user knows the correct secret (visits the correct URL), then
  their UserContact is set to verified=true and the UserSecret is deleted.
  UserSecret is only visible to network admins.
**/
asset UserSecret identified by id {
  o String id
  --> UserContact contact
  o String secret
}

abstract participant User identified by name {
  o String name regex=/^[a-zA-Z0-9_\-.~|\/]+$/ // username shown publicly on platform, must be unique
  o DateTime createdAt
  --> UserContact contact
  /* probably superfluous, when identity mgmt of Composer/Fabric/Fabric CA is used:
  o String passwordHash
  o DateTime timestampPassword
  */
  o Integer reputation default=0
  o DateTime lastCommentAt default="1776-03-09T12:00:00.000Z"
  o DateTime lastCommentDeletedAt default="1776-03-09T12:00:00.000Z"
  /* Fields that can be edited by user: */
  o String avatarUrl regex=/^[a-z]+:\/\/[^ ]+$/ optional // URL to potentially external avatar image
  o String publicEmail regex=/^[^\s]+@[^\s]+\.[a-zA-Z0-9-]{2,}$/ optional
  o String bio optional /* let the users say something about themselves if they want */
  o String preferredLang regex=/^[a-z]{2}$/ optional // ISO language code according to https://en.wikipedia.org/wiki/ISO_639-1
}

participant Person extends User {
  /* Personal users (individual persons) are identified by checking that they
     possess a valid identification card or passport. The hash of the
     passport number is stored to ensure that the person holding this
     passport is only registered under a single account (in computer
     science terms, to avoid a "Sybil attack").
     It would be good to have an automated passport validation, for
     scalability when the number of users becomes very high. If this is
     feasible remains to be seen. */
  o String country regex=/^[A-Z]{2}$/ // ISO country code according to https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 (obligatory because passport number must be unique in each country)
  o String passportNrHash /* the hash of the passport number to make sure
      that this person only participates under one account */
  /* Fields that can be edited by user: */
  o String realName optional // if user wants, they can enter their real name
  o String url regex=/^[a-z]+:\/\/[^ ]+$/ optional // URL of the website of the user (if any)
  o String location optional // place where user is based
}

enum OrgType {
  o NON_GOVERNMENT_NOT_FOR_PROFIT
  o GOVERNMENT_NOT_FOR_PROFIT
  o FOR_PROFIT
}

/**
  NGOs and other organizations can have verified 'official' accounts.
  Also companies can use an "official" verified account to respond to information and ratings.
*/
participant Organization extends User {
  /* Organizations are verified by if they use an email address (in their UserContact)
     registered under their official domain name, ideally an official
     contact address listed on the organization's web pages.
     If they prove that they can access this official email account,
     they are considered valid. There is no need to validate a
     passport of an individual member of the organization.
     The check can and should probably be performed by a human. */
  /* Fields that can be edited by user: */
  o String orgName // what is the full official name of the organization?
  o OrgType orgType
  o String url regex=/^[a-z]+:\/\/[^ ]+$/ // URL of the website of the org., where the used email address should be listed
  o String country regex=/^[A-Z]{2}$/ optional // ISO country code according to https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 (just for information)
  o String address optional // where is this organization located?
}

/********************
 * GENERAL CONCEPTS *
 ********************/

enum Status {
  o PRELIMINARY
  o ACTIVE
  o OUTDATED
  o DELETED
  o REJECTED
}

concept Score {
  o Integer environment range=[-100,100] // air pollution, water pollution, ground pollution, waste, toxic substances released into environment etc., without GHG gases
  o Integer climate range=[-100,100] // emission of GHG gases and other climate-active actions like land-use change
  o Integer society range=[-100,100] // working conditions, fair pay, workers' health, child labor, equity, treatment of suppliers, impact on society like charitable projects
  o Integer health range=[-100,100] // impact on consumer's health, e.g. sugar and fat content in food or toxic substances in textiles or toys, acting on consumer
  o Integer animal_welfare range=[-100,100] // if animals were involved in the production, were they treated with due respect? Can they lead a pleasant, healthy life?
  o Integer economy range=[-100,100] // in the sense of 'value for money', longevity of product, price/performance ratio, is price too high because of the psychologically developed brand image? how economical is product for consumers?
}

/**
  Reviewable assets must pass a peer review before going online. They can be
  edited/updated/deleted by other users, initiating another peer review.
**/

abstract asset ReviewableAsset identified by id { /* only Comment extends ReviewableAsset */
  o String id
  --> User createdBy
  o DateTime createdAt
  o Status status default="PRELIMINARY"
}

abstract asset UpdatableAsset extends ReviewableAsset { /* only Information extends UpdatableAsset */
  --> User updatedBy
  o DateTime updatedAt
  --> ReviewableAsset supersedes optional /* Previous version of this asset before it was updated. */
  --> ReviewableAsset supersededBy optional /* Newer version of this asset.
    If `supersededBy` is not empty and status == "ACTIVE", then there is a newer version,
    which is still under review (in the 'review queue'). If status == "OUTDATED",
    then the newer version `supersededBy` was accepted by the reviewers.
    There can always be only one version of the asset (within the 'asset chain')
    with status == "ACTIVE". When a new version is set to "ACTIVE", then the previous
    version must be set to "OUTDATED".
    There can also be only one version of the asset with status == "PRELIMINARY"
    (with the same asset in `supersedes`), i.e. only one new version of each asset
    can be in the 'review queue'. When an asset has a new version under review, the
    buttons for editing/deleting it must be deactivated with a message 'Currently under
    review' (with link to the proposed new version). When a user submits a new version,
    it must be checked whether in the meantime, an asset with the same asset in
    `supersedes` and status == "PRELIMINARY" was already submitted (concurrently).
    If so, the new asset version is not accepted and a message is displayed to the user,
    ideally pointing out the differences between her version and the version submitted
    to the 'review queue' during the editing. */
  o String changeReason optional /* If this is a newer version (`supersedes` is set),
    the user who updated the asset can supply a reason for the change/deletion to
    increase the probability that the reviewers will approve the change. */
}

abstract asset ScorableAsset extends UpdatableAsset { /* all others (Product, Producer, Label) extend ScorableAsset */
  o Score score // shall be recalculated when any information changes
}

/**********
 * LABELS *
 **********/

concept LabelLocaleData {
  o String lang regex=/^[a-z]{2}$/ // ISO language code according to https://en.wikipedia.org/wiki/ISO_639-1, there should be only one locale data for each language
  o String name
  o String description optional
  o String url regex=/^[a-z]+:\/\/[^ ]+$/ optional
  o String[] categories
}

asset Label extends ScorableAsset {
  o LabelLocaleData[] locales
  o String version optional
}

/*************
 * PRODUCERS *
 *************/

asset Producer extends ScorableAsset {
  o String name
  o String address optional
  o String url regex=/^[a-z]+:\/\/[^ ]+$/ optional
  --> Label[] labels
}

/************
 * PRODUCTS *
 ************/

concept ProductLocaleData {
  o String lang regex=/^[a-z]{2}$/ // ISO language code according to https://en.wikipedia.org/wiki/ISO_639-1, there should be only one locale data for each language
  o String name // product 'short name'
  o String price optional
  o String currency optional
  o String description optional // product 'long name' or the bottom licenses
  o String[] quantities optional // how much contained in one package? (can have several sizes)
  o String ingredients optional
  o String[] packaging
  o String[] categories
  o String imageUrl regex=/^[a-z]+:\/\/[^ ]+$/ optional // URL to potentially external product image
  o String url regex=/^[a-z]+:\/\/[^ ]+$/ optional // URL to producer website
}

asset Product extends ScorableAsset {
  o String gtin optional // Global Trade Item Number, i.e. barcode, product may not have one
  --> Producer producer
  --> Product[] containedProducts
  --> Label[] labels
  o ProductLocaleData[] locales
}

/***************
 * INFORMATION *
 ***************/

enum InfoCategory {
  o GENERAL_INFORMATION
  o LIFE_CYCLE_ANALYSIS
  o EXTERNAL_COSTS
  o STUDY_OR_PAPER
  o PRESS_ARTICLE
  o INVESTIGATIVE_REPORT
  o CORPORATE_SOCIAL_RESPONSIBILITY
  o JURISDICTION
  o OTHER
}

abstract concept Source {
}

concept WebSource extends Source {
  o String url regex=/^[a-z]+:\/\/[^ ]+$/
  o DateTime accessDate
  o String title optional
  o String[] authors optional
}

concept BookSource extends Source {
  o String title
  o String[] authors
  o Integer publishYear
  o String publisher optional
  o String isbn optional
  o Integer[] pages range=[1,] optional
  o String url regex=/^[a-z]+:\/\/[^ ]+$/ optional
}

concept ArticleSource extends Source {
  o String title
  o String[] authors
  o String journal
  o Integer year
  o Integer month range=[1,12] optional
  o Integer volume optional
  o Integer firstPage optional
  o Integer lastPage optional
  o String doi optional
  o String url regex=/^[a-z]+:\/\/[^ ]+$/ optional
  o String bookTitle optional
  o String editor optional
}

asset Information extends UpdatableAsset {
  o String title
  o InfoCategory category
  --> ScorableAsset target
  o String description
  /* o String url regex=/^[a-z]+:\/\/[^ ]+$/ optional */
  o Source[] sources
  o Integer weight default=0
}

/**********
 * REVIEW *
 **********/

/**
  Reviews, i.e. peer reviews, decide about whether an asset (information, product,
  producer, label) is of high enough quality and unbiased enough to go online.
  There should at least be a certain number of reviews supporting the asset.
  The system selects random users and appoints them to perform a review. For
  example, five users could be randomly selected of which at least three must
  approve the asset.
**/

enum ReviewDecision {
  o PENDING
  o APPROVED
  o REJECTED
  o IGNORED
}

enum RejectReason {
  o INAPPROPRIATE
  o INCORRECT
  o OUTDATED
  /* o TRIVIAL not required as reject reason, because what appears trivial is subjective; info can be downvoted later */
  o DUPLICATE
  o MISSING_SRC
  o OTHER
}

asset Review identified by id {
  o String id
  --> ReviewableAsset target
  --> User user
  o DateTime requestedAt
  o ReviewDecision decision default="PENDING"
  o DateTime timestamp default="1776-03-09T12:00:00.000Z"
  o RejectReason rejectReason optional
  o String reasonComment optional
}

/**********
 * RATING *
 **********/

/**
  Ratings are like atomic units of score. The weighted average of all ratings'
  scores provides the score of a ScorableAsset. A rating must always refer to
  one single Information.
**/

asset Rating identified by id {
  o String id
  --> ScorableAsset target
  --> Information information
  --> User createdBy
  o DateTime createdAt
  /* Ratings are not updatable */
  o Score score
  o Integer weight default=0 /* sum of votes */
  o Status status default="PRELIMINARY" /* This status should mirror the
    information's status and is only provided for convenience to avoid frequent
    information lookups when recalculating average score. */
}

/***********
 * COMMENT *
 ***********/

/**
  Comments can be added to an information by users, e.g. supporting, putting into
  perspective or discrediting an information, suggesting an interpretation of the
  information or providing legitimation for a specific rating.
  In order to spare the users from some work, comments are not reviewed before
  going online. However, other users can add a flag to a comment, signifying that
  the comment should be deleted (e.g. in case of trolls). A review deciding about
  the comment deletion is then initiated. To limit troll actions, a comment can
  be made only once every X (e.g. 10) minutes, ensured by looking at the `lastCommentAt`
  field of the user (is this required? Could also just do a query). As long as at
  least one comment is flagged, a user cannot make another comment. If the flagging
  results in deletion, the user cannot make a comment for Y (e.g. 14) days, ensured
  by looking at the `lastCommentDeletedAt` field of the user (is this required?
  Could also just do a query).
**/

enum FlagReason {
  o INAPPROPRIATE
  o INCORRECT
  o OUTDATED
  o TRIVIAL
  o OTHER
}

concept Flag {
  o FlagReason flaggedAs
  --> User flaggedBy
  o DateTime flaggedAt
  o String comment
}

asset Comment extends ReviewableAsset {
  --> Rating rating
  o String text
  o Integer weight default=0 /* sum of votes */
  o Flag flag optional
}

/**********
 * VOTING *
 **********/

/**
  Votings are the 'likes' or up/down votes. The sum of all votings gives the
  weight of the voted asset, i.e. a proxy for its relevance.
  The weights can subsequently enter the calculation of the average score of a
  product/producer/label.
**/

abstract asset Voting identified by id {
  o String id
  --> User user
  o DateTime timestamp
  o Integer vote range=[-1,1]
}

asset RateVoting extends Voting {
  --> Rating rating
}

asset InfoVoting extends Voting {
  --> Information information
}

asset CommentVoting extends Voting {
  --> Comment comment
}

/* ---------------------------------------------------------------------------*/

/****************
 * TRANSACTIONS *
 ****************/

transaction UpdatePersonData identified by id {
  o String id
  --> Person person
  /* Inherited from User: */
  o String avatarUrl regex=/^[a-z]+:\/\/[^ ]+$/ optional // URL to potentially external avatar image
  o String publicEmail regex=/^[^\s]+@[^\s]+\.[a-zA-Z0-9-]{2,}$/ optional
  o String bio optional /* let the users say something about themselves if they want */
  /* Specific to Person: */
  o String realName optional // if user wants, they can enter their real name
  o String url regex=/^[a-z]+:\/\/[^ ]+$/ optional // URL of the website of the user (if any)
  o String location optional // place where user is based
}

transaction UpdateOrganizationData identified by id {
  o String id
  --> Organization organization
  /* Inherited from User: */
  o String avatarUrl regex=/^[a-z]+:\/\/[^ ]+$/ optional // URL to potentially external avatar image
  o String publicEmail regex=/^[^\s]+@[^\s]+\.[a-zA-Z0-9-]{2,}$/ optional
  o String bio optional /* let the users say something about themselves if they want */
  /* Specific to Organization: */
  o String orgName optional // what is the full official name of the organization?
  o String url regex=/^[a-z]+:\/\/[^ ]+$/ optional // URL of the website of the org., where the used email address should be listed
  o String country regex=/^[A-Z]{2}$/ optional // ISO country code according to https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 (just for information)
  o String address optional // where is this organization located?
}

transaction UpdateUserContact identified by id {
  o String id
  o String contactId
  o String secretId
  --> User user
  o String email regex=/^[^\s]+@[^\s]+\.[a-zA-Z0-9-]{2,}$/
}

transaction VerifyUserContact identified by id {
  o String id
  --> UserSecret userSecret
  o String secret
}
